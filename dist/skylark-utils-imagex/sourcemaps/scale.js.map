{"version":3,"sources":["scale.js"],"names":["define","renderImageToCanvas","canvas","img","sourceX","sourceY","sourceWidth","sourceHeight","destX","destY","destWidth","destHeight","getContext","drawImage","images","scale","options","data","maxWidth","maxHeight","minWidth","minHeight","pixelRatio","downsamplingRatio","tmp","document","createElement","useCanvas","crop","aspectRatio","hasCanvasOption","width","naturalWidth","height","naturalHeight","scaleUp","Math","max","scaleDown","min","newOptions","i","hasOwnProperty","getTransformedOptions","left","top","undefined","right","bottom","contain","cover","style"],"mappings":"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","file":"../scale.js","sourcesContent":["define([\r\n], function() {\r\n   //The module code is based from blueimp/JavaScript-Load-Image\r\n   // original : https://github.com/blueimp/JavaScript-Load-Image/blob/master/js/load-image-scale.js\r\n   // license  : MIT\r\n\r\n  'use strict'\r\n\r\n  // Transform image coordinates, allows to override e.g.\r\n  // the canvas orientation based on the orientation option,\r\n  // gets canvas, options passed as arguments:\r\n  function transformCoordinates() {\r\n\r\n  }\r\n\r\n  // Returns transformed options, allows to override e.g.\r\n  // maxWidth, maxHeight and crop options based on the aspectRatio.\r\n  // gets img, options passed as arguments:\r\n  function getTransformedOptions(img, options) {\r\n    var aspectRatio = options.aspectRatio\r\n    var newOptions\r\n    var i\r\n    var width\r\n    var height\r\n    if (!aspectRatio) {\r\n      return options\r\n    }\r\n    newOptions = {}\r\n    for (i in options) {\r\n      if (options.hasOwnProperty(i)) {\r\n        newOptions[i] = options[i]\r\n      }\r\n    }\r\n    newOptions.crop = true\r\n    width = img.naturalWidth || img.width\r\n    height = img.naturalHeight || img.height\r\n    if (width / height > aspectRatio) {\r\n      newOptions.maxWidth = height * aspectRatio\r\n      newOptions.maxHeight = height\r\n    } else {\r\n      newOptions.maxWidth = width\r\n      newOptions.maxHeight = width / aspectRatio\r\n    }\r\n    return newOptions\r\n  }\r\n\r\n  // Canvas render method, allows to implement a different rendering algorithm:\r\n  function renderImageToCanvas(\r\n    canvas,\r\n    img,\r\n    sourceX,\r\n    sourceY,\r\n    sourceWidth,\r\n    sourceHeight,\r\n    destX,\r\n    destY,\r\n    destWidth,\r\n    destHeight\r\n  ) {\r\n    canvas\r\n      .getContext('2d')\r\n      .drawImage(\r\n        img,\r\n        sourceX,\r\n        sourceY,\r\n        sourceWidth,\r\n        sourceHeight,\r\n        destX,\r\n        destY,\r\n        destWidth,\r\n        destHeight\r\n      )\r\n    return canvas\r\n  }\r\n\r\n  // Determines if the target image should be a canvas element:\r\n  function hasCanvasOption(options) {\r\n    return options.canvas || options.crop || !!options.aspectRatio\r\n  }\r\n\r\n  // Scales and/or crops the given image (img or canvas HTML element)\r\n  // using the given options.\r\n  // Returns a canvas object if the browser supports canvas\r\n  // and the hasCanvasOption method returns true or a canvas\r\n  // object is passed as image, else the scaled image:\r\n   function scale(img, options, data) {\r\n    options = options || {}\r\n    var canvas = document.createElement('canvas')\r\n    var useCanvas =\r\n      img.getContext ||\r\n      (hasCanvasOption(options) && canvas.getContext)\r\n    var width = img.naturalWidth || img.width;\r\n    var height = img.naturalHeight || img.height;\r\n    var destWidth = width;\r\n    var destHeight = height;\r\n    var maxWidth\r\n    var maxHeight\r\n    var minWidth\r\n    var minHeight\r\n    var sourceWidth\r\n    var sourceHeight\r\n    var sourceX\r\n    var sourceY\r\n    var pixelRatio\r\n    var downsamplingRatio\r\n    var tmp\r\n    function scaleUp () {\r\n      var scale = Math.max(\r\n        (minWidth || destWidth) / destWidth,\r\n        (minHeight || destHeight) / destHeight\r\n      )\r\n      if (scale > 1) {\r\n        destWidth *= scale\r\n        destHeight *= scale\r\n      }\r\n    }\r\n    function scaleDown () {\r\n      var scale = Math.min(\r\n        (maxWidth || destWidth) / destWidth,\r\n        (maxHeight || destHeight) / destHeight\r\n      )\r\n      if (scale < 1) {\r\n        destWidth *= scale\r\n        destHeight *= scale\r\n      }\r\n    }\r\n    if (useCanvas) {\r\n      options = getTransformedOptions(img, options, data)\r\n      sourceX = options.left || 0\r\n      sourceY = options.top || 0\r\n      if (options.sourceWidth) {\r\n        sourceWidth = options.sourceWidth\r\n        if (options.right !== undefined && options.left === undefined) {\r\n          sourceX = width - sourceWidth - options.right\r\n        }\r\n      } else {\r\n        sourceWidth = width - sourceX - (options.right || 0)\r\n      }\r\n      if (options.sourceHeight) {\r\n        sourceHeight = options.sourceHeight\r\n        if (options.bottom !== undefined && options.top === undefined) {\r\n          sourceY = height - sourceHeight - options.bottom\r\n        }\r\n      } else {\r\n        sourceHeight = height - sourceY - (options.bottom || 0)\r\n      }\r\n      destWidth = sourceWidth\r\n      destHeight = sourceHeight\r\n    }\r\n    maxWidth = options.maxWidth\r\n    maxHeight = options.maxHeight\r\n    minWidth = options.minWidth\r\n    minHeight = options.minHeight\r\n    if (useCanvas && maxWidth && maxHeight && options.crop) {\r\n      destWidth = maxWidth\r\n      destHeight = maxHeight\r\n      tmp = sourceWidth / sourceHeight - maxWidth / maxHeight\r\n      if (tmp < 0) {\r\n        sourceHeight = maxHeight * sourceWidth / maxWidth\r\n        if (options.top === undefined && options.bottom === undefined) {\r\n          sourceY = (height - sourceHeight) / 2\r\n        }\r\n      } else if (tmp > 0) {\r\n        sourceWidth = maxWidth * sourceHeight / maxHeight\r\n        if (options.left === undefined && options.right === undefined) {\r\n          sourceX = (width - sourceWidth) / 2\r\n        }\r\n      }\r\n    } else {\r\n      if (options.contain || options.cover) {\r\n        minWidth = maxWidth = maxWidth || minWidth\r\n        minHeight = maxHeight = maxHeight || minHeight\r\n      }\r\n      if (options.cover) {\r\n        scaleDown()\r\n        scaleUp()\r\n      } else {\r\n        scaleUp()\r\n        scaleDown()\r\n      }\r\n    }\r\n    if (useCanvas) {\r\n      pixelRatio = options.pixelRatio\r\n      if (pixelRatio > 1) {\r\n        canvas.style.width = destWidth + 'px'\r\n        canvas.style.height = destHeight + 'px'\r\n        destWidth *= pixelRatio\r\n        destHeight *= pixelRatio\r\n        canvas.getContext('2d').scale(pixelRatio, pixelRatio)\r\n      }\r\n      downsamplingRatio = options.downsamplingRatio\r\n      if (\r\n        downsamplingRatio > 0 &&\r\n        downsamplingRatio < 1 &&\r\n        destWidth < sourceWidth &&\r\n        destHeight < sourceHeight\r\n      ) {\r\n        while (sourceWidth * downsamplingRatio > destWidth) {\r\n          canvas.width = sourceWidth * downsamplingRatio\r\n          canvas.height = sourceHeight * downsamplingRatio\r\n          renderImageToCanvas(\r\n            canvas,\r\n            img,\r\n            sourceX,\r\n            sourceY,\r\n            sourceWidth,\r\n            sourceHeight,\r\n            0,\r\n            0,\r\n            canvas.width,\r\n            canvas.height\r\n          )\r\n          sourceX = 0\r\n          sourceY = 0\r\n          sourceWidth = canvas.width\r\n          sourceHeight = canvas.height\r\n          img = document.createElement('canvas')\r\n          img.width = sourceWidth\r\n          img.height = sourceHeight\r\n          renderImageToCanvas(\r\n            img,\r\n            canvas,\r\n            0,\r\n            0,\r\n            sourceWidth,\r\n            sourceHeight,\r\n            0,\r\n            0,\r\n            sourceWidth,\r\n            sourceHeight\r\n          )\r\n        }\r\n      }\r\n      canvas.width = destWidth\r\n      canvas.height = destHeight\r\n      transformCoordinates(canvas, options)\r\n      return renderImageToCanvas(\r\n        canvas,\r\n        img,\r\n        sourceX,\r\n        sourceY,\r\n        sourceWidth,\r\n        sourceHeight,\r\n        0,\r\n        0,\r\n        destWidth,\r\n        destHeight\r\n      )\r\n    }\r\n    img.width = destWidth\r\n    img.height = destHeight\r\n    return img\r\n  }\r\n\r\n  return images.scale = scale;\r\n});"]}